<%= javascript_include_tag "bootstrap.js" %>
<%= javascript_include_tag "jquery-2.1.3.min.js" %>
<%= javascript_include_tag "d3.js" %>
<%= javascript_include_tag "d3.layout.js" %>
<%= javascript_include_tag "packages.js" %>
<%= stylesheet_link_tag "bootstrap.css" %>

<div class="topic_svg" style="top: 0px;!important;">
<script type="text/javascript">
    //parseInt($(window).height()) - 100
    var w = 1280,
            h = 800,
            rx = w / 2,
            ry = h / 2,
            m0,
            rotate = 0;

    var splines = [];

    var cluster = d3.layout.cluster()
            .size([360, ry - 120])
            .sort(function(a, b) { return d3.ascending(a.key, b.key); });

    var bundle = d3.layout.bundle();

    var line = d3.svg.line.radial()
            .interpolate("bundle")
            .tension(.85)
            .radius(function(d) { return d.y; })
            .angle(function(d) { return d.x / 180 * Math.PI; });

    // Chrome 15 bug: <http://code.google.com/p/chromium/issues/detail?id=98951>
    $("div.topic_svg").css('height', (parseInt($(window).height()) - 50) + 'px');
    var div = d3.select("div.topic_svg").insert("div", "h2")
//            .style("top", "0px")
//            .style("left", "-160px")
            .style("width", w + "px")
            .style("height", w + "px")
//            .style("position", "absolute")
            .style("-webkit-backface-visibility", "hidden");

    var svg = div.append("svg:svg")
            .attr("width", w)
            .attr("height", w)
            .append("svg:g")
            .attr("transform", "translate(" + rx + "," + ry + ")");

    svg.append("svg:path")
            .attr("class", "arc")
            .attr("d", d3.svg.arc().outerRadius(ry - 120).innerRadius(0).startAngle(0).endAngle(2 * Math.PI))
            .on("mousedown", mousedown);

//        d3.json("https://gist.githubusercontent.com/mbostock/1044242/raw/7b3997f1556f1ea862d462b3d73d70ed6bc68ea3/readme-flare-imports.json", function(classes) {
    d3.json("get_json.json", function(classes) {
        var number_arr = []
        for(var i=0; i<classes.length; i++) {
            number_arr = number_arr.concat(classes[i].number);
        }
        number_arr = $.unique(number_arr).sort(function(a, b) {return a-b;});
        var min_num = number_arr[0], max_num = number_arr[number_arr.length - 1];
        var every_level_diff = (max_num - min_num)/6;
        var nodes = cluster.nodes(packages.root(classes)),
                links = packages.imports(nodes),
                splines = bundle(links);

        var path = svg.selectAll("path.link")
                .data(links)
                .enter().append("svg:path")
                .attr("class", function(d) {
                    var importss =  d.source.imports, imports_num = d.source.number, im_num = 0;
                    for(var i=0; i<importss.length; i++) {
                        if(importss[i] == d.target.key) {
                            im_num = imports_num[i];
                        }
                    }
                    var level = (im_num - min_num) / every_level_diff + 1;
                    return "link source-" + d.source.key + " target-" + d.target.key + " color-" + parseInt(level);
                })
                .attr("d", function(d, i) {
                    return line(splines[i]);
                });

        svg.selectAll("g.node")
                .data(nodes.filter(function(n) { return !n.children; }))
                .enter().append("svg:g")
                .attr("class", "node")
                .attr("id", function(d) { return "node-" + d.key; })
                .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
                .append("svg:text")
                .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
                .attr("dy", ".31em")
                .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
                .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
                .text(function(d) { return d.key; })
                .on("mouseover", mouseover)
                .on("mouseout", mouseout);

        d3.select("input[type=range]").on("change", function() {
            line.tension(this.value / 100);
            path.attr("d", function(d, i) { return line(splines[i]); });
        });
    });

    d3.select(window)
            .on("mousemove", mousemove)
            .on("mouseup", mouseup);

    function mouse(e) {
        return [e.pageX - rx, e.pageY - ry];
    }

    function mousedown() {
        m0 = mouse(d3.event);
        d3.event.preventDefault();
    }

    function mousemove() {
        if (m0) {
            var m1 = mouse(d3.event),
                    dm = Math.atan2(cross(m0, m1), dot(m0, m1)) * 180 / Math.PI;
            div.style("-webkit-transform", "translateY(" + (ry - rx) + "px)rotateZ(" + dm + "deg)translateY(" + (rx - ry) + "px)");
        }
    }

    function mouseup() {
        if (m0) {
            var m1 = mouse(d3.event),
                    dm = Math.atan2(cross(m0, m1), dot(m0, m1)) * 180 / Math.PI;

            rotate += dm;
            if (rotate > 360) rotate -= 360;
            else if (rotate < 0) rotate += 360;
            m0 = null;

            div.style("-webkit-transform", null);

            svg
                    .attr("transform", "translate(" + rx + "," + ry + ")rotate(" + rotate + ")")
                    .selectAll("g.node text")
                    .attr("dx", function(d) { return (d.x + rotate) % 360 < 180 ? 8 : -8; })
                    .attr("text-anchor", function(d) { return (d.x + rotate) % 360 < 180 ? "start" : "end"; })
                    .attr("transform", function(d) { return (d.x + rotate) % 360 < 180 ? null : "rotate(180)"; });
        }
    }

    function mouseover(d) {
        svg.selectAll("path.link.target-" + d.key)
                .classed("target", true)
                .each(updateNodes("source", true));

        svg.selectAll("path.link.source-" + d.key)
                .classed("source", true)
                .each(updateNodes("target", true));
    }

    function mouseout(d) {
        svg.selectAll("path.link.source-" + d.key)
                .classed("source", false)
                .each(updateNodes("target", false));

        svg.selectAll("path.link.target-" + d.key)
                .classed("target", false)
                .each(updateNodes("source", false));
    }

    function updateNodes(name, value) {
        return function(d) {
            if (value) this.parentNode.appendChild(this);
            svg.select("#node-" + d[name].key).classed(name, value);
        };
    }

    function cross(a, b) {
        return a[0] * b[1] - a[1] * b[0];
    }

    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }

</script>
<style type="text/css">

    path.arc {
        cursor: move;
        fill: #fff;
    }

    .node {
        font-size: 10px;
    }

    .node:hover {
        fill: #1f77b4;
    }

    .link {
        fill: none;
        stroke: #1f77b4;
        stroke-opacity: .4;
        pointer-events: none;
    }

    .link.source, .link.target {
        stroke-opacity: 1;
        stroke: #2ca02c !important;
        /*stroke-width: 2px;*/
    }

    .node.target {
        fill: #d62728 !important;
    }

    .link.source {
        /*stroke: #d62728;*/
    }

    .node.source {
        fill: #2ca02c;
    }

    .link.target {
        /*stroke: #2ca02c;*/
    }

    .color-1 {
        stroke:#eee !important;
        stroke-width: 0px;
        fill: none;
    }
    .color-2 {
        stroke:#eee !important;
        stroke-width: 1px;
        fill: none;
    }
    .color-3 {
        stroke:#ddd !important;
        stroke-width: 2px;
        fill: none;
    }
    .color-4 {
        stroke:#bbb !important;
        stroke-width: 3px;
        fill: none;
    }
    .color-5 {
        stroke:#aaa !important;
        stroke-width: 4px;
        fill: none;
    }
    .color-6 {
        stroke:#999 !important;
        stroke-width: 5px;
        fill: none;
    }

    .topic_svg {
        /*height: 600px;*/
        overflow-y: scroll;
    }

</style>
</div>